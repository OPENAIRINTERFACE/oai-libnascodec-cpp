#include <helpers.h>

#include <string>
#include <sstream>
#include <vector>
#include <iostream>
#include <iomanip>

std::ostream &operator<<(std::ostream &output, std::vector<uint8_t> &data)
{
    for (const auto &el : data)
    {
        output << el;
    }
    return output;
}

std::string stack_and_format_exception(const std::string &raised, const std::string &thrown)
{
    return raised + "\n" + thrown;
}

// Wireshark understands a hexdump of the form generated by od -Ax -tx1 -v
/*
000000 00 e0 1e a7 05 6f 00 10 ........
000008 5a a0 b9 12 08 00 46 00 ........
000010 03 68 00 00 00 00 0a 2e ........
000018 ee 33 0f 19 08 7f 0f 19 ........
000020 03 80 94 04 00 00 10 01 ........
000028 16 a2 0a 00 03 50 00 0c ........
000030 01 01 0f 19 03 80 11 01 ........
*/
std::string dump_wireshark(const std::vector<uint8_t> &data)
{
    std::string result;
    std::stringstream ss;
    const unsigned int width = 8;
    const unsigned int address_size = 5;

    unsigned int offset = 0;

    while (offset < data.size())
    {
        std::vector<uint8_t>::const_iterator end;
        if ((offset + width) >= data.size())
        {
            end = data.cend();
        }
        else
        {
            end = data.cbegin() + offset + width;
        }

        std::vector<uint8_t> row(data.cbegin() + offset, end);
        // address
        ss << std::setfill('0') << std::setw(address_size) << std::hex << offset;
        ss << " ";
        // hex
        for (const auto &byte : row)
        {
            ss << std::setfill('0') << std::setw(2) << std::hex << static_cast<unsigned int>(byte);
            ss << " ";
        }
        for (unsigned int i = row.size(); i < width; i++)
        {
            ss << "   ";
        }
        // ascii
        for (const auto &byte : row)
        {
            if (byte > 32 && byte < 127)
            {
                ss << std::setfill('.') << std::setw(1) << byte;
            }
            else
            {
                ss << ".";
            }
        }
        ss << std::endl;
        offset += width;
    }
    return ss.str();
}
